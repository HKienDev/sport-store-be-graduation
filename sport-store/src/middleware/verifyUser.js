import jwt from 'jsonwebtoken';
import env from '../config/env.js';

const verifyUser = (req, res, next) => {
  try {
    // L·∫•y token t·ª´ header ho·∫∑c cookie
    const authHeader = req.headers.authorization;
    const token = authHeader ? authHeader.split(' ')[1] : req.cookies.token;

    console.log('üîπ Authorization Header:', authHeader);
    console.log('üîπ [Middleware] Authorization Header:', authHeader);

    if (!token) {
      console.log('‚ùå [Middleware] L·ªói x√°c th·ª±c Token: Thi·∫øu ho·∫∑c sai ƒë·ªãnh d·∫°ng Access Token');
      return res.status(401).json({ 
        error: 'Unauthorized',
        details: 'Thi·∫øu ho·∫∑c sai ƒë·ªãnh d·∫°ng Access Token'
      });
    }

    // Verify token v·ªõi ACCESS_TOKEN_SECRET thay v√¨ JWT_SECRET
    const decoded = jwt.verify(token, env.ACCESS_TOKEN_SECRET);
    console.log('üîπ [Middleware] Decoded Token:', decoded);

    // Ki·ªÉm tra role
    if (decoded.role !== 'admin') {
      console.log('‚ùå [Middleware] L·ªói x√°c th·ª±c Token: Kh√¥ng c√≥ quy·ªÅn Admin');
      return res.status(403).json({ 
        error: 'Forbidden',
        details: 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y'
      });
    }

    // Th√™m th√¥ng tin user v√†o request
    req.user = decoded;
    next();
  } catch (error) {
    console.log('‚ùå [Middleware] L·ªói x√°c th·ª±c Token:', error.message);
    console.log('‚ùå L·ªói verifyUser:', error.message);
    return res.status(401).json({ 
      error: 'Unauthorized',
      details: error.message
    });
  }
};

export default verifyUser;