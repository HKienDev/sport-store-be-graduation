import Product from "../models/product.js";
import Category from "../models/category.js"; // Import model danh m·ª•c

// L·∫•y danh s√°ch s·∫£n ph·∫©m (c√≥ ph√¢n trang, ch·ªâ hi·ªÉn th·ªã s·∫£n ph·∫©m ƒëang b·∫≠t)
export const getProducts = async (req, res) => {
  try {
    const { page = 1, limit = 10 } = req.query;
    const products = await Product.find({ isActive: true })
      .populate('category', 'name')
      .skip((page - 1) * limit)
      .limit(parseInt(limit));
    
    res.status(200).json({
      success: true,
      products
    });
  } catch (error) {
    res.status(500).json({ 
      success: false,
      message: error.message 
    });
  }
};

// L·∫•y chi ti·∫øt s·∫£n ph·∫©m theo ID
import mongoose from "mongoose";

export const getProductById = async (req, res) => {
  try {
    const productId = req.params.id;

    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng ObjectId
    if (!mongoose.Types.ObjectId.isValid(productId)) {
      return res.status(404).json({ 
        success: false,
        message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i!" 
      });
    }

    const product = await Product.findById(productId)
      .populate('category', 'name');

    if (!product) {
      return res.status(404).json({ 
        success: false,
        message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i!" 
      });
    }

    res.status(200).json({
      success: true,
      product
    });
  } catch (error) {
    res.status(500).json({ 
      success: false,
      message: "L·ªói server: " + error.message 
    });
  }
};

// Th√™m s·∫£n ph·∫©m m·ªõi (Admin)
export const createProduct = async (req, res) => {
  try {
    console.log('üîç Headers:', req.headers);
    console.log('üîç Content-Type:', req.headers['content-type']);
    console.log('üîç Raw body:', req.rawBody);

    const {
      name,
      description,
      brand,
      price,
      discountPrice,
      stock,
      category,
      isActive,
      images,
      color,
      size,
      sku,
      tags,
    } = req.body;

    // Log chi ti·∫øt request body
    console.log('üîç Request body:', JSON.stringify(req.body, null, 2));
    console.log('üîç Chi ti·∫øt c√°c tr∆∞·ªùng:');
    console.log('- name:', name, typeof name);
    console.log('- description:', description, typeof description);
    console.log('- brand:', brand, typeof brand);
    console.log('- price:', price, typeof price);
    console.log('- stock:', stock, typeof stock);
    console.log('- category:', category, typeof category);
    console.log('- images:', images);
    console.log('- sku:', sku, typeof sku);

    // Ki·ªÉm tra th√¥ng tin b·∫Øt bu·ªôc
    if (!name || !description || !brand || !price || !stock || !category || !images?.main || !sku) {
      const missingFields = {
        name: !name,
        description: !description,
        brand: !brand,
        price: !price,
        stock: !stock,
        category: !category,
        'images.main': !images?.main,
        sku: !sku
      };

      console.log('‚ùå Thi·∫øu c√°c tr∆∞·ªùng:', Object.keys(missingFields).filter(key => missingFields[key]));
      
      return res.status(400).json({ 
        success: false,
        error: 'Bad Request',
        message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin s·∫£n ph·∫©m",
        details: {
          name: !name ? 'T√™n s·∫£n ph·∫©m l√† b·∫Øt bu·ªôc' : null,
          description: !description ? 'M√¥ t·∫£ s·∫£n ph·∫©m l√† b·∫Øt bu·ªôc' : null,
          brand: !brand ? 'Th∆∞∆°ng hi·ªáu l√† b·∫Øt bu·ªôc' : null,
          price: !price ? 'Gi√° l√† b·∫Øt bu·ªôc' : null,
          stock: !stock ? 'S·ªë l∆∞·ª£ng t·ªìn kho l√† b·∫Øt bu·ªôc' : null,
          category: !category ? 'Danh m·ª•c l√† b·∫Øt bu·ªôc' : null,
          images: !images?.main ? '·∫¢nh ch√≠nh l√† b·∫Øt bu·ªôc' : null,
          sku: !sku ? 'SKU l√† b·∫Øt bu·ªôc' : null
        }
      });
    }

    // Ki·ªÉm tra SKU c√≥ b·ªã tr√πng kh√¥ng
    const existingProduct = await Product.findOne({ sku });
    if (existingProduct) {
      console.log('‚ùå Duplicate SKU:', sku);
      return res.status(400).json({ 
        success: false,
        error: 'Bad Request',
        message: "SKU ƒë√£ t·ªìn t·∫°i, vui l√≤ng ch·ªçn SKU kh√°c"
      });
    }

    // T·∫°o s·∫£n ph·∫©m m·ªõi
    const newProduct = new Product({
      name,
      description,
      brand,
      price,
      discountPrice: discountPrice || price,
      stock,
      category,
      isActive: isActive ?? true,
      images: {
        main: images.main,
        sub: images.sub || [],
      },
      color: color || [],
      size: size || [],
      sku,
      tags: tags || [],
      ratings: { average: 0, count: 0 },
    });

    console.log('üîπ Creating new product:', newProduct);

    await newProduct.save();

    // C·∫≠p nh·∫≠t productCount trong danh m·ª•c
    await Category.findByIdAndUpdate(category, { $inc: { productCount: 1 } });

    // Populate category tr∆∞·ªõc khi tr·∫£ v·ªÅ
    const populatedProduct = await Product.findById(newProduct._id)
      .populate('category', 'name');

    console.log('‚úÖ Product created successfully');
    res.status(201).json({ 
      success: true,
      message: "T·∫°o s·∫£n ph·∫©m th√†nh c√¥ng", 
      product: populatedProduct 
    });
  } catch (error) {
    console.error('‚ùå Error creating product:', error);
    res.status(500).json({ 
      success: false,
      error: 'Internal Server Error',
      message: "L·ªói khi t·∫°o s·∫£n ph·∫©m",
      details: error.message 
    });
  }
};

// C·∫≠p nh·∫≠t s·∫£n ph·∫©m (Admin)
export const updateProduct = async (req, res) => {
  try {
    const { sku } = req.body;

    // Ki·ªÉm tra n·∫øu SKU b·ªã tr√πng (tr·ª´ ch√≠nh s·∫£n ph·∫©m ƒëang c·∫≠p nh·∫≠t)
    if (sku) {
      const existingProduct = await Product.findOne({ sku, _id: { $ne: req.params.id } });
      if (existingProduct) {
        return res.status(400).json({ 
          success: false,
          message: "SKU ƒë√£ t·ªìn t·∫°i, vui l√≤ng ch·ªçn SKU kh√°c" 
        });
      }
    }

    const product = await Product.findByIdAndUpdate(
      req.params.id, 
      req.body, 
      { new: true }
    ).populate('category', 'name');

    if (!product) {
      return res.status(404).json({ 
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" 
      });
    }

    res.status(200).json({
      success: true,
      message: "C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng",
      product
    });
  } catch (error) {
    res.status(500).json({ 
      success: false,
      message: error.message 
    });
  }
};

// X√≥a s·∫£n ph·∫©m (Admin)
export const deleteProduct = async (req, res) => {
  try {
    const product = await Product.findByIdAndDelete(req.params.id);
    if (!product) {
      return res.status(404).json({ 
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" 
      });
    }

    // Gi·∫£m productCount trong danh m·ª•c
    await Category.findByIdAndUpdate(product.category, { $inc: { productCount: -1 } });

    res.status(200).json({ 
      success: true,
      message: "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng" 
    });
  } catch (error) {
    res.status(500).json({ 
      success: false,
      message: error.message 
    });
  }
};

// C·∫≠p nh·∫≠t tr·∫°ng th√°i s·∫£n ph·∫©m (Admin)
export const toggleProductStatus = async (req, res) => {
  try {
    const productId = req.params.id;

    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng ObjectId
    if (!mongoose.Types.ObjectId.isValid(productId)) {
      return res.status(404).json({ 
        success: false,
        message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i!" 
      });
    }

    const product = await Product.findById(productId);

    if (!product) {
      return res.status(404).json({ 
        success: false,
        message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i!" 
      });
    }

    // ƒê·∫£o ng∆∞·ª£c tr·∫°ng th√°i isActive
    product.isActive = !product.isActive;
    await product.save();

    res.status(200).json({
      success: true,
      message: product.isActive ? "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t" : "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c ng·ª´ng b√°n",
      product
    });
  } catch (error) {
    res.status(500).json({ 
      success: false,
      message: "L·ªói server: " + error.message 
    });
  }
};