import mongoose from "mongoose";
import bcrypt from "bcryptjs";
import User from "../models/user.js";
import Order from "../models/order.js";
import jwt from "jsonwebtoken";

// L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng (·∫©n password)
export const getAllUsers = async (req, res) => {
  try {
    const users = await User.find()
      .select("-__v -password")
      .lean()
      .exec();

    // ƒê·∫∑t isActive th√†nh false cho t·∫•t c·∫£ user
    const modifiedUsers = users.map(user => ({
      ...user,
      isActive: false
    }));

    res.json(modifiedUsers);
  } catch (error) {
    res.status(500).json({ message: "L·ªói m√°y ch·ªß n·ªôi b·ªô." });
  }
};

// L·∫•y th√¥ng tin user ƒëang ƒëƒÉng nh·∫≠p
export const getUserProfile = async (req, res) => {
  try {
      console.log("üîπ [Controller] Nh·∫≠n request GET /profile t·ª´ user:", req.user);

      const user = await User.findById(req.user.userId).select("-password -refreshToken");
      if (!user) {
          console.error("‚ùå [Controller] Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng");
          return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
      }

      console.log("‚úÖ [Controller] Tr·∫£ v·ªÅ th√¥ng tin user:", user);
      res.status(200).json(user);
  } catch (error) {
      console.error("‚ùå [Controller] L·ªói server:", error.message);
      res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};

// L·∫•y th√¥ng tin user theo ID (admin)
export const getUserById = async (req, res) => {
  try {
    const user = await User.findById(req.params.id).select("-__v -password").lean();
    if (!user) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng." });
    }
    res.json(user);
  } catch (error) {
    res.status(500).json({ message: "L·ªói m√°y ch·ªß n·ªôi b·ªô." });
  }
};

// T·∫°o ng∆∞·ªùi d√πng m·ªõi
export const register = async (req, res) => {
  let { email, password, username, isAdminCreate } = req.body;

  if (isAdminCreate && req.user.role !== "admin") {
    return res.status(403).json({ message: "Ch·ªâ admin m·ªõi c√≥ quy·ªÅn t·∫°o t√†i kho·∫£n." });
  }

  if (!email || !password || !username) {
    return res.status(400).json({ message: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc." });
  }

  try {
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ message: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng." });
    }

    const hashedPassword = await bcrypt.hash(password, 10);

    const newUser = new User({
      email,
      password: hashedPassword,
      username,
      role: "user",
      isVerified: isAdminCreate ? true : false,
      createdAt: Date.now(),
      address: { province: "", district: "", ward: "", street: "" },
      dob: null,
      gender: "other",
    });

    const savedUser = await newUser.save();

    res.status(201).json({
      _id: savedUser._id,
      email: savedUser.email,
      username: savedUser.username,
      role: savedUser.role,
      isVerified: savedUser.isVerified,
      createdAt: savedUser.createdAt,
      address: savedUser.address,
      dob: savedUser.dob,
      gender: savedUser.gender,
    });
  } catch (error) {
    res.status(500).json({ message: "L·ªói m√°y ch·ªß n·ªôi b·ªô." });
  }
};

// C·∫≠p nh·∫≠t th√¥ng tin user theo ID (admin)
export const updateUserByAdmin = async (req, res) => {
  try {
    if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
      return res.status(400).json({ message: "ID kh√¥ng h·ª£p l·ªá!" });
    }

    let { password, fullname, username, phone, avatar, role, address, dob, gender, isActive } = req.body;
    const updateFields = {};

    if (fullname) updateFields.fullname = fullname;
    if (username) updateFields.username = username;
    if (phone) updateFields.phone = phone;
    if (avatar) updateFields.avatar = avatar;
    if (role) updateFields.role = role;
    if (dob) updateFields.dob = dob;
    if (gender) updateFields.gender = gender;
    if (typeof isActive === "boolean") updateFields.isActive = isActive;

    if (password) {
      updateFields.password = await bcrypt.hash(password, 10);
    }

    if (address) {
      updateFields.address = {
        province: address.province || "",
        district: address.district || "",
        ward: address.ward || "",
        street: address.street || "",
      };
    }

    const updatedUser = await User.findByIdAndUpdate(req.params.id, updateFields, { new: true }).select("-__v -password");

    if (!updatedUser) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng." });
    }

    res.json(updatedUser);
  } catch (error) {
    res.status(500).json({ message: "L·ªói m√°y ch·ªß n·ªôi b·ªô." });
  }
};

// X√≥a user theo ID (admin)
export const deleteUser = async (req, res) => {
  try {
    if (req.user.role !== "admin") {
      return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a ng∆∞·ªùi d√πng." });
    }

    const deletedUser = await User.findByIdAndDelete(req.params.id);
    if (!deletedUser) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng." });
    }

    res.json({ message: "X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng." });
  } catch (error) {
    res.status(500).json({ message: "L·ªói m√°y ch·ªß n·ªôi b·ªô." });
  }
};

// Admin t·∫°o admin m·ªõi
export const createNewAdmin = async (req, res) => {
  try {
    const { email, password, username } = req.body;

    if (req.user.role !== "admin") {
      return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn t·∫°o admin m·ªõi." });
    }

    if (!email || !password || !username) {
      return res.status(400).json({ message: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc." });
    }

    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ message: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng." });
    }

    const hashedPassword = await bcrypt.hash(password, 10);

    const newAdmin = new User({
      email,
      password: hashedPassword,
      username,
      role: "admin",
      isActive: true,
      isVerified: true,
    });

    await newAdmin.save();

    res.status(201).json({
      message: "T·∫°o t√†i kho·∫£n admin th√†nh c√¥ng!",
      admin: {
        _id: newAdmin._id,
        email: newAdmin.email,
        username: newAdmin.username,
        role: newAdmin.role,
      },
    });
  } catch (error) {
    res.status(500).json({ message: "L·ªói m√°y ch·ªß n·ªôi b·ªô." });
  }
};

// L·∫•y th√¥ng tin user theo s·ªë ƒëi·ªán tho·∫°i
export const getUserByPhone = async (req, res) => {
  try {
    const { phone } = req.params;

    if (!phone) {
      return res.status(400).json({ 
        success: false,
        message: "S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" 
      });
    }

    // T√¨m user theo s·ªë ƒëi·ªán tho·∫°i
    const user = await User.findOne({ phone })
      .select('_id username email phone')
      .lean();

    if (!user) {
      return res.status(200).json({ 
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi s·ªë ƒëi·ªán tho·∫°i n√†y",
        exists: false 
      });
    }

    // Tr·∫£ v·ªÅ th√¥ng tin user n·∫øu t·ªìn t·∫°i
    res.json({
      success: true, 
      exists: true,
      message: "T√¨m th·∫•y ng∆∞·ªùi d√πng",
      user: {
        _id: user._id,
        username: user.username,
        email: user.email,
        phone: user.phone
      }
    });
  } catch (error) {
    console.error("‚ùå [Controller] L·ªói khi t√¨m user theo s·ªë ƒëi·ªán tho·∫°i:", error);
    res.status(500).json({ 
      success: false,
      message: "L·ªói m√°y ch·ªß khi t√¨m ki·∫øm ng∆∞·ªùi d√πng",
      error: error.message 
    });
  }
};

// C·∫≠p nh·∫≠t orderCount cho t·∫•t c·∫£ user
export const updateAllUsersOrderCount = async (req, res) => {
  try {
    const users = await User.find({});
    
    for (const user of users) {
      // ƒê·∫øm s·ªë ƒë∆°n h√†ng kh√¥ng b·ªã h·ªßy c·ªßa user
      const orderCount = await Order.countDocuments({
        user: user._id,
        status: { $ne: "cancelled" }
      });

      // C·∫≠p nh·∫≠t orderCount cho user
      await User.findByIdAndUpdate(user._id, { orderCount });
    }

    res.json({
      success: true,
      message: "ƒê√£ c·∫≠p nh·∫≠t orderCount cho t·∫•t c·∫£ user"
    });
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t orderCount:", error);
    res.status(500).json({
      success: false,
      message: "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t orderCount",
      error: error.message
    });
  }
};

// C·∫≠p nh·∫≠t totalSpent c·ªßa user
export const updateUserTotalSpent = async (req, res) => {
  try {
    const { userId, totalSpent, orderId } = req.body;

    console.log("üîÑ [Controller] ƒêang c·∫≠p nh·∫≠t totalSpent cho user:", userId);
    console.log("üí∞ [Controller] T·ªïng ti·ªÅn ƒë∆°n h√†ng:", totalSpent);
    console.log("üì¶ [Controller] ID ƒë∆°n h√†ng:", orderId);

    // Ki·ªÉm tra userId c√≥ h·ª£p l·ªá kh√¥ng
    if (!userId) {
      console.error("‚ùå [Controller] ID ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i");
      return res.status(400).json({ 
        success: false,
        message: "ID ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" 
      });
    }

    // Ki·ªÉm tra userId c√≥ ph·∫£i l√† MongoDB ObjectId h·ª£p l·ªá kh√¥ng
    if (!mongoose.Types.ObjectId.isValid(userId)) {
      console.error("‚ùå [Controller] ID ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá:", userId);
      return res.status(400).json({ 
        success: false,
        message: "ID ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá" 
      });
    }

    // Ki·ªÉm tra totalSpent c√≥ h·ª£p l·ªá kh√¥ng
    if (!totalSpent || totalSpent <= 0) {
      console.error("‚ùå [Controller] T·ªïng ti·ªÅn ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá:", totalSpent);
      return res.status(400).json({ 
        success: false,
        message: "T·ªïng ti·ªÅn ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá" 
      });
    }

    // Ki·ªÉm tra orderId c√≥ h·ª£p l·ªá kh√¥ng
    if (!orderId) {
      console.error("‚ùå [Controller] ID ƒë∆°n h√†ng kh√¥ng t·ªìn t·∫°i");
      return res.status(400).json({ 
        success: false,
        message: "ID ƒë∆°n h√†ng kh√¥ng t·ªìn t·∫°i" 
      });
    }

    // Ki·ªÉm tra orderId c√≥ ph·∫£i l√† MongoDB ObjectId h·ª£p l·ªá kh√¥ng
    if (!mongoose.Types.ObjectId.isValid(orderId)) {
      console.error("‚ùå [Controller] ID ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá:", orderId);
      return res.status(400).json({ 
        success: false,
        message: "ID ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá" 
      });
    }

    // T√¨m user
    const user = await User.findById(userId);
    if (!user) {
      console.error("‚ùå [Controller] Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID:", userId);
      return res.status(404).json({ 
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" 
      });
    }

    // T√¨m ƒë∆°n h√†ng
    const order = await Order.findById(orderId);
    if (!order) {
      console.error("‚ùå [Controller] Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi ID:", orderId);
      return res.status(404).json({ 
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" 
      });
    }

    // Ki·ªÉm tra xem ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t√≠nh v√†o totalSpent ch∆∞a
    if (order.isTotalSpentUpdated) {
      console.log("‚ÑπÔ∏è [Controller] ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t√≠nh v√†o totalSpent");
      return res.status(200).json({ 
        success: true,
        message: "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t√≠nh v√†o totalSpent" 
      });
    }

    // C·∫≠p nh·∫≠t totalSpent c·ªßa user
    user.totalSpent = (user.totalSpent || 0) + totalSpent;

    // C·∫≠p nh·∫≠t h·∫°ng th√†nh vi√™n d·ª±a tr√™n totalSpent
    if (user.totalSpent >= 10000000) {
      user.membershipLevel = "H·∫°ng Kim C∆∞∆°ng";
    } else if (user.totalSpent >= 5000000) {
      user.membershipLevel = "H·∫°ng B·∫°ch Kim";
    } else if (user.totalSpent >= 2000000) {
      user.membershipLevel = "H·∫°ng V√†ng";
    } else if (user.totalSpent >= 500000) {
      user.membershipLevel = "H·∫°ng B·∫°c";
    } else {
      user.membershipLevel = "H·∫°ng S·∫Øt";
    }

    // L∆∞u thay ƒë·ªïi
    await user.save();

    // ƒê√°nh d·∫•u ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t√≠nh v√†o totalSpent
    order.isTotalSpentUpdated = true;
    await order.save();

    console.log("‚úÖ [Controller] C·∫≠p nh·∫≠t totalSpent th√†nh c√¥ng");
    res.status(200).json({ 
      success: true,
      message: "C·∫≠p nh·∫≠t totalSpent th√†nh c√¥ng",
      user: {
        _id: user._id,
        totalSpent: user.totalSpent,
        membershipLevel: user.membershipLevel
      }
    });
  } catch (error) {
    console.error("‚ùå [Controller] L·ªói khi c·∫≠p nh·∫≠t totalSpent:", error);
    res.status(500).json({ 
      success: false,
      message: "L·ªói khi c·∫≠p nh·∫≠t totalSpent",
      error: error.message 
    });
  }
};

// Admin reset password cho user
export const resetUserPassword = async (req, res) => {
  try {
    const { id } = req.params;
    const { password } = req.body;

    // Ki·ªÉm tra quy·ªÅn admin
    if (req.user.role !== "admin") {
      return res.status(403).json({ 
        success: false,
        message: "B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y." 
      });
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u m·ªõi
    if (!password || password.length < 6) {
      return res.status(400).json({
        success: false,
        message: "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±"
      });
    }

    // M√£ h√≥a m·∫≠t kh·∫©u m·ªõi
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);

    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u trong database
    const updatedUser = await User.findByIdAndUpdate(
      id,
      { password: hashedPassword },
      { new: true }
    ).select("-password");

    if (!updatedUser) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"
      });
    }

    return res.status(200).json({
      success: true,
      message: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng",
      user: updatedUser
    });

  } catch (error) {
    console.error("‚ùå [Controller] L·ªói khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:", error);
    return res.status(500).json({
      success: false,
      message: "L·ªói server khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u"
    });
  }
};

// ƒê·ªïi m·∫≠t kh·∫©u
export const changePassword = async (req, res) => {
  try {
    const { currentPassword, newPassword } = req.body;
    const userId = req.user.userId;

    // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!currentPassword || !newPassword) {
      return res.status(400).json({
        success: false,
        message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß m·∫≠t kh·∫©u hi·ªán t·∫°i v√† m·∫≠t kh·∫©u m·ªõi"
      });
    }

    // T√¨m user trong database
    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"
      });
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u hi·ªán t·∫°i
    const isMatch = await bcrypt.compare(currentPassword, user.password);
    if (!isMatch) {
      return res.status(401).json({
        success: false,
        message: "M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ch√≠nh x√°c"
      });
    }

    // Hash m·∫≠t kh·∫©u m·ªõi
    const hashedPassword = await bcrypt.hash(newPassword, 10);

    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
    user.password = hashedPassword;
    await user.save();

    return res.status(200).json({
      success: true,
      message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng"
    });
  } catch (error) {
    console.error("‚ùå [Controller] L·ªói ƒë·ªïi m·∫≠t kh·∫©u:", error.message);
    return res.status(500).json({
      success: false,
      message: "L·ªói server",
      error: error.message
    });
  }
};

// ƒêƒÉng nh·∫≠p
export const login = async (req, res) => {
  try {
    const { email, password } = req.body;

    // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!email || !password) {
      return res.status(400).json({
        success: false,
        message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß email v√† m·∫≠t kh·∫©u"
      });
    }

    // T√¨m user trong database
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(401).json({
        success: false,
        message: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c"
      });
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(401).json({
        success: false,
        message: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c"
      });
    }

    // Ki·ªÉm tra tr·∫°ng th√°i t√†i kho·∫£n
    if (!user.isActive) {
      return res.status(403).json({
        success: false,
        message: "T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a"
      });
    }

    // T·∫°o access token
    const accessToken = jwt.sign(
      { userId: user._id, role: user.role },
      process.env.JWT_SECRET,
      { expiresIn: "1h" }
    );

    // T·∫°o refresh token
    const refreshToken = jwt.sign(
      { userId: user._id },
      process.env.JWT_REFRESH_SECRET,
      { expiresIn: "7d" }
    );

    // L∆∞u refresh token v√†o database
    user.refreshToken = refreshToken;
    await user.save();

    // Set refresh token v√†o cookie
    res.cookie("refreshToken", refreshToken, {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: "strict",
      maxAge: 7 * 24 * 60 * 60 * 1000 // 7 days
    });

    // Tr·∫£ v·ªÅ th√¥ng tin user v√† access token
    return res.status(200).json({
      success: true,
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
      data: {
        user: {
          _id: user._id,
          email: user.email,
          username: user.username,
          role: user.role,
          isActive: user.isActive,
          isVerified: user.isVerified,
          createdAt: user.createdAt,
          address: user.address,
          dob: user.dob,
          gender: user.gender
        },
        accessToken
      }
    });
  } catch (error) {
    console.error("‚ùå [Controller] L·ªói ƒëƒÉng nh·∫≠p:", error.message);
    return res.status(500).json({
      success: false,
      message: "L·ªói server",
      error: error.message
    });
  }
};

// ƒêƒÉng xu·∫•t
export const logout = async (req, res) => {
  try {
    const userId = req.user.userId;

    // X√≥a refresh token trong database
    await User.findByIdAndUpdate(userId, { refreshToken: null });

    // X√≥a refresh token trong cookie
    res.clearCookie("refreshToken", {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: "strict",
      maxAge: 0
    });

    return res.status(200).json({
      success: true,
      message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng"
    });
  } catch (error) {
    console.error("‚ùå [Controller] L·ªói ƒëƒÉng xu·∫•t:", error.message);
    return res.status(500).json({
      success: false,
      message: "L·ªói server",
      error: error.message
    });
  }
};

// Refresh token
export const refreshToken = async (req, res) => {
  try {
    const refreshToken = req.cookies.refreshToken;

    if (!refreshToken) {
      return res.status(401).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y refresh token"
      });
    }

    // Verify refresh token
    const decoded = jwt.verify(refreshToken, process.env.JWT_REFRESH_SECRET);

    // T√¨m user trong database
    const user = await User.findById(decoded.userId);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"
      });
    }

    // Ki·ªÉm tra refresh token c√≥ kh·ªõp v·ªõi token trong database kh√¥ng
    if (user.refreshToken !== refreshToken) {
      return res.status(401).json({
        success: false,
        message: "Refresh token kh√¥ng h·ª£p l·ªá"
      });
    }

    // T·∫°o access token m·ªõi
    const accessToken = jwt.sign(
      { userId: user._id, role: user.role },
      process.env.JWT_SECRET,
      { expiresIn: "1h" }
    );

    // T·∫°o refresh token m·ªõi
    const newRefreshToken = jwt.sign(
      { userId: user._id },
      process.env.JWT_REFRESH_SECRET,
      { expiresIn: "7d" }
    );

    // L∆∞u refresh token m·ªõi v√†o database
    user.refreshToken = newRefreshToken;
    await user.save();

    // Set refresh token m·ªõi v√†o cookie
    res.cookie("refreshToken", newRefreshToken, {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: "strict",
      maxAge: 7 * 24 * 60 * 60 * 1000 // 7 days
    });

    // Tr·∫£ v·ªÅ access token m·ªõi
    return res.status(200).json({
      success: true,
      message: "Refresh token th√†nh c√¥ng",
      data: {
        accessToken
      }
    });
  } catch (error) {
    console.error("‚ùå [Controller] L·ªói refresh token:", error.message);
    return res.status(500).json({
      success: false,
      message: "L·ªói server",
      error: error.message
    });
  }
};

// C·∫≠p nh·∫≠t th√¥ng tin user ƒëang ƒëƒÉng nh·∫≠p
export const updateProfile = async (req, res) => {
  try {
    const userId = req.user.userId;
    const { fullname, username, phone, avatar, address, dob, gender } = req.body;

    // T√¨m user trong database
    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"
      });
    }

    // C·∫≠p nh·∫≠t th√¥ng tin
    if (fullname) user.fullname = fullname;
    if (username) user.username = username;
    if (phone) user.phone = phone;
    if (avatar) user.avatar = avatar;
    if (dob) user.dob = dob;
    if (gender) user.gender = gender;

    if (address) {
      user.address = {
        province: address.province || "",
        district: address.district || "",
        ward: address.ward || "",
        street: address.street || ""
      };
    }

    await user.save();

    return res.status(200).json({
      success: true,
      message: "C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng",
      data: {
        user: {
          _id: user._id,
          email: user.email,
          username: user.username,
          fullname: user.fullname,
          phone: user.phone,
          avatar: user.avatar,
          role: user.role,
          isActive: user.isActive,
          isVerified: user.isVerified,
          createdAt: user.createdAt,
          address: user.address,
          dob: user.dob,
          gender: user.gender
        }
      }
    });
  } catch (error) {
    console.error("‚ùå [Controller] L·ªói c·∫≠p nh·∫≠t th√¥ng tin:", error.message);
    return res.status(500).json({
      success: false,
      message: "L·ªói server",
      error: error.message
    });
  }
};