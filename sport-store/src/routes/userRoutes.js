const express = require("express");
const router = express.Router();
const mongoose = require("mongoose");
const userController = require("../controllers/userController");
const authMiddleware = require("../middlewares/authMiddleware"); // Middleware ki·ªÉm tra quy·ªÅn

// Middleware ki·ªÉm tra ObjectId h·ª£p l·ªá
const validateObjectId = (req, res, next) => {
  if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
    return res.status(400).json({ message: "ID ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá." });
  }
  next();
};

// üõ† Routes d√†nh cho admin
router.get("/", authMiddleware.verifyAdmin, userController.getAllUsers); // Admin l·∫•y danh s√°ch user
router.get("/:id", authMiddleware.verifyAdmin, validateObjectId, userController.getUserById); // Admin l·∫•y th√¥ng tin user theo ID
router.put("/admin/:id", authMiddleware.verifyAdmin, userController.updateUserByAdmin); // Admin update user
router.delete("/admin/:id", authMiddleware.verifyAdmin, validateObjectId, userController.deleteUser); // Admin x√≥a user
router.post("/admin", authMiddleware.verifyAdmin, userController.createUser); // Admin t·∫°o user m·ªõi
router.post("/admin/create-admin", authMiddleware.verifyAdmin, userController.createNewAdmin);
module.exports = router;