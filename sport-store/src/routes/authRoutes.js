import express from "express";
import passport from "passport";
import jwt from "jsonwebtoken";
import env from "../config/env.js";
import User from "../models/user.js";
import * as authController from "../controllers/authController.js";
import { authenticateToken } from "../middlewares/authenticateToken.js";
import { verifyAccessToken } from "../middlewares/authMiddleware.js";

const router = express.Router();

// Ki·ªÉm tra route ho·∫°t ƒë·ªông
router.get("/", (req, res) => {
    res.json({ message: "Route x√°c th·ª±c ƒëang ho·∫°t ƒë·ªông!" });
});

// ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi (G·ª≠i OTP qua email)
router.post("/register", authController.register);

// X√°c th·ª±c OTP ƒë·ªÉ k√≠ch ho·∫°t t√†i kho·∫£n
router.post("/verify-account", authController.verifyOTP);

// ƒêƒÉng nh·∫≠p t√†i kho·∫£n
router.post("/login", authController.login);

// ƒêƒÉng xu·∫•t t√†i kho·∫£n
router.post("/logout", authController.logout);

// Qu√™n m·∫≠t kh·∫©u (G·ª≠i OTP qua email)
router.post("/forgot-password", authController.forgotPassword);

// X√°c th·ª±c OTP qu√™n m·∫≠t kh·∫©u & nh·∫≠n token ƒë·ªÉ ƒë·ªïi m·∫≠t kh·∫©u
router.post("/verify-forgot-password-otp", authController.verifyForgotPasswordOTP);

// G·ª≠i OTP ƒë·ªÉ x√°c th·ª±c tr∆∞·ªõc khi thay ƒë·ªïi th√¥ng tin b·∫£o m·∫≠t
router.post("/request-update", authenticateToken, authController.requestUpdate); // ‚úÖ Th√™m `authenticateToken`

// X√°c th·ª±c OTP v√† c·∫≠p nh·∫≠t th√¥ng tin b·∫£o m·∫≠t (email, username, password)
router.put("/update-user", authenticateToken, authController.updateUser); // ‚úÖ Th√™m `authenticateToken`

// Route b·∫Øt ƒë·∫ßu ƒëƒÉng nh·∫≠p Google
router.get(
    "/google",
    passport.authenticate("google", { scope: ["profile", "email"] })
);

// Route x·ª≠ l√Ω callback sau khi Google x√°c th·ª±c th√†nh c√¥ng
router.get(
    "/google/callback",
    passport.authenticate("google", { session: false }),
    (req, res) => {
        if (!req.user) {
            return res.status(400).json({ message: "X√°c th·ª±c Google th·∫•t b·∫°i" });
        }

        // üìå T·∫°o JWT token
        const token = jwt.sign(
            { userId: req.user._id, email: req.user.email },
            env.JWT_SECRET,
            { expiresIn: "7d" }
        );

        // üîí G·ª≠i token qua HTTP-only cookie thay v√¨ URL
        res.cookie("authToken", token, {
            httpOnly: true,
            secure: env.NODE_ENV === "production",
            sameSite: "Lax",
            maxAge: 7 * 24 * 60 * 60 * 1000, // 7 ng√†y
        });

        // üìå Chuy·ªÉn h∆∞·ªõng v·ªÅ FE m√† kh√¥ng ƒë·ªÉ l·ªô token
        res.redirect(`${env.FRONTEND_URL}/user/auth/google-success`);
    }
);

// L·∫•y th√¥ng tin user t·ª´ token
router.get("/profile", authenticateToken, async (req, res) => {
  try {
      // T√¨m user trong database
      const user = await User.findById(req.user.userId).select("-password -refreshToken");
      
      if (!user) {
          return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
      }

      res.json({ message: "User Profile", user });
  } catch (error) {
      res.status(500).json({ message: "L·ªói server", error: error.message });
  }
});

// X√°c th·ª±c token
router.post("/verify-token", authController.verifyToken);

// Refresh token
router.post("/refresh-token", authController.refreshToken);

// Check auth status (Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p)
router.get("/check", verifyAccessToken, authController.checkAuth);

export default router;